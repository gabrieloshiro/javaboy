package javaboy.instruction;

import javaboy.lang.Byte;

public enum BaseOpcode implements Opcode {

    //                DEC     HEX      BIN
    NOP(0), //   00   00000000
    LD_BC_nn(1), //   01   00000001
    LD_iBCi_A(2), //   02   00000010
    INC_BC(3), //   03   00000011
    INC_B(4), //   04   00000100
    DEC_B(5), //   05   00000101
    LD_B_n(6), //   06   00000110
    RLCA(7), //   07   00000111
    LD_inni_SP(8), //   08   00001000
    ADD_HL_BC(9), //   09   00001001
    LD_A_iBCi(10), //   0A   00001010
    DEC_BC(11), //   0B   00001011
    INC_C(12), //   0C   00001100
    DEC_C(13), //   0D   00001101
    LD_C_n(14), //   0E   00001110
    RRCA(15), //   0F   00001111
    STOP(16), //   10   00010000
    LD_DE_nn(17), //   11   00010001
    LD_iDEi_A(18), //   12   00010010
    INC_DE(19), //   13   00010011
    INC_D(20), //   14   00010100
    DEC_D(21), //   15   00010101
    LD_D_n(22), //   16   00010110
    RLA(23), //   17   00010111
    JR_n(24), //   18   00011000
    ADD_HL_DE(25), //   19   00011001
    LD_A_iDEi(26), //   1A   00011010
    DEC_DE(27), //   1B   00011011
    INC_E(28), //   1C   00011100
    DEC_E(29), //   1D   00011101
    LD_E_n(30), //   1E   00011110
    RRA(31), //   1F   00011111
    JR_NZ_n(32), //   20   00100000
    LD_HL_nn(33), //   21   00100001
    LDI_iHLi_A(34), //   22   00100010
    INC_HL(35), //   23   00100011
    INC_H(36), //   24   00100100
    DEC_H(37), //   25   00100101
    LD_H_n(38), //   26   00100110
    DAA(39), //   27   00100111
    JR_Z_n(40), //   28   00101000
    ADD_HL_HL(41), //   29   00101001
    LDI_A_iHLi(42), //   2A   00101010
    DEC_HL(43), //   2B   00101011
    INC_L(44), //   2C   00101100
    DEC_L(45), //   2D   00101101
    LD_L_n(46), //   2E   00101110
    CPL(47), //   2F   00101111
    JR_NC_n(48), //   30   00110000
    LD_SP_nn(49), //   31   00110001
    LDD_iHLi_A(50), //   32   00110010
    INC_SP(51), //   33   00110011
    INC_iHLi(52), //   34   00110100
    DEC_iHLi(53), //   35   00110101
    LD_iHLi_n(54), //   36   00110110
    SCF(55), //   37   00110111
    JR_C_n(56), //   38   00111000
    ADD_HL_SP(57), //   39   00111001
    LDD_A_iHLi(58), //   3A   00111010
    DEC_SP(59), //   3B   00111011
    INC_A(60), //   3C   00111100
    DEC_A(61), //   3D   00111101
    LD_A_n(62), //   3E   00111110
    CCF(63), //   3F   00111111
    LD_B_B(64), //   40   01000000
    LD_B_C(65), //   41   01000001
    LD_B_D(66), //   42   01000010
    LD_B_E(67), //   43   01000011
    LD_B_H(68), //   44   01000100
    LD_B_L(69), //   45   01000101
    LD_B_iHLi(70), //   46   01000110
    LD_B_A(71), //   47   01000111
    LD_C_B(72), //   48   01001000
    LD_C_C(73), //   49   01001001
    LD_C_D(74), //   4A   01001010
    LD_C_E(75), //   4B   01001011
    LD_C_H(76), //   4C   01001100
    LD_C_L(77), //   4D   01001101
    LD_C_iHLi(78), //   4E   01001110
    LD_C_A(79), //   4F   01001111
    LD_D_B(80), //   50   01010000
    LD_D_C(81), //   51   01010001
    LD_D_D(82), //   52   01010010
    LD_D_E(83), //   53   01010011
    LD_D_H(84), //   54   01010100
    LD_D_L(85), //   55   01010101
    LD_D_iHLi(86), //   56   01010110
    LD_D_A(87), //   57   01010111
    LD_E_B(88), //   58   01011000
    LD_E_C(89), //   59   01011001
    LD_E_D(90), //   5A   01011010
    LD_E_E(91), //   5B   01011011
    LD_E_H(92), //   5C   01011100
    LD_E_L(93), //   5D   01011101
    LD_E_iHLi(94), //   5E   01011110
    LD_E_A(95), //   5F   01011111
    LD_H_B(96), //   60   01100000
    LD_H_C(97), //   61   01100001
    LD_H_D(98), //   62   01100010
    LD_H_E(99), //   63   01100011
    LD_H_H(100), //   64   01100100
    LD_H_L(101), //   65   01100101
    LD_H_iHLi(102), //   66   01100110
    LD_H_A(103), //   67   01100111
    LD_L_B(104), //   68   01101000
    LD_L_C(105), //   69   01101001
    LD_L_D(106), //   6A   01101010
    LD_L_E(107), //   6B   01101011
    LD_L_H(108), //   6C   01101100
    LD_L_L(109), //   6D   01101101
    LD_L_iHLi(110), //   6E   01101110
    LD_L_A(111), //   6F   01101111
    LD_iHLi_B(112), //   70   01110000
    LD_iHLi_C(113), //   71   01110001
    LD_iHLi_D(114), //   72   01110010
    LD_iHLi_E(115), //   73   01110011
    LD_iHLi_H(116), //   74   01110100
    LD_iHLi_L(117), //   75   01110101
    HALT(118), //   76   01110110
    LD_iHLi_A(119), //   77   01110111
    LD_A_B(120), //   78   01111000
    LD_A_C(121), //   79   01111001
    LD_A_D(122), //   7A   01111010
    LD_A_E(123), //   7B   01111011
    LD_A_H(124), //   7C   01111100
    LD_A_L(125), //   7D   01111101
    LD_A_iHLi(126), //   7E   01111110
    LD_A_A(127), //   7F   01111111
    ADD_B(128), //   80   10000000
    ADD_C(129), //   81   10000001
    ADD_D(130), //   82   10000010
    ADD_E(131), //   83   10000011
    ADD_H(132), //   84   10000100
    ADD_L(133), //   85   10000101
    ADD_iHLi(134), //   86   10000110
    ADD_A(135), //   87   10000111
    ADC_B(136), //   88   10001000
    ADC_C(137), //   89   10001001
    ADC_D(138), //   8A   10001010
    ADC_E(139), //   8B   10001011
    ADC_H(140), //   8C   10001100
    ADC_L(141), //   8D   10001101
    ADC_iHLi(142), //   8E   10001110
    ADC_A(143), //   8F   10001111
    SUB_B(144), //   90   10010000
    SUB_C(145), //   91   10010001
    SUB_D(146), //   92   10010010
    SUB_E(147), //   93   10010011
    SUB_H(148), //   94   10010100
    SUB_L(149), //   95   10010101
    SUB_iHLi(150), //   96   10010110
    SUB_A(151), //   97   10010111
    SBC_B(152), //   98   10011000
    SBC_C(153), //   99   10011001
    SBC_D(154), //   9A   10011010
    SBC_E(155), //   9B   10011011
    SBC_H(156), //   9C   10011100
    SBC_L(157), //   9D   10011101
    SBC_iHLi(158), //   9E   10011110
    SBC_A(159), //   9F   10011111
    AND_B(160), //   A0   10100000
    AND_C(161), //   A1   10100001
    AND_D(162), //   A2   10100010
    AND_E(163), //   A3   10100011
    AND_H(164), //   A4   10100100
    AND_L(165), //   A5   10100101
    AND_iHLi(166), //   A6   10100110
    AND_A(167), //   A7   10100111
    XOR_B(168), //   A8   10101000
    XOR_C(169), //   A9   10101001
    XOR_D(170), //   AA   10101010
    XOR_E(171), //   AB   10101011
    XOR_H(172), //   AC   10101100
    XOR_L(173), //   AD   10101101
    XOR_iHLi(174), //   AE   10101110
    XOR_A(175), //   AF   10101111
    OR_B(176), //   B0   10110000
    OR_C(177), //   B1   10110001
    OR_D(178), //   B2   10110010
    OR_E(179), //   B3   10110011
    OR_H(180), //   B4   10110100
    OR_L(181), //   B5   10110101
    OR_iHLi(182), //   B6   10110110
    OR_A(183), //   B7   10110111
    CP_B(184), //   B8   10111000
    CP_C(185), //   B9   10111001
    CP_D(186), //   BA   10111010
    CP_E(187), //   BB   10111011
    CP_H(188), //   BC   10111100
    CP_L(189), //   BD   10111101
    CP_iHLi(190), //   BE   10111110
    CP_A(191), //   BF   10111111
    RET_NZ(192), //   C0   11000000
    POP_BC(193), //   C1   11000001
    JP_NZ_nn(194), //   C2   11000010
    JP_nn(195), //   C3   11000011
    CALL_NZ_nn(196), //   C4   11000100
    PUSH_BC(197), //   C5   11000101
    ADD_n(198), //   C6   11000110
    RST_00(199), //   C7   11000111
    RET_Z(200), //   C8   11001000
    RET(201), //   C9   11001001
    JP_Z_nn(202), //   CA   11001010
    PREFIX_CB(203), //   CB   11001011
    CALL_Z_nn(204), //   CC   11001100
    CALL_nn(205), //   CD   11001101
    ADC_n(206), //   CE   11001110
    RST_08(207), //   CF   11001111
    RET_NC(208), //   D0   11010000
    POP_DE(209), //   D1   11010001
    JP_NC_nn(210), //   D2   11010010
    UNUSED_D3(211), //   D3   11010011
    CALL_NC_nn(212), //   D4   11010100
    PUSH_DE(213), //   D5   11010101
    SUB_n(214), //   D6   11010110
    RST_10(215), //   D7   11010111
    RET_C(216), //   D8   11011000
    RETI(217), //   D9   11011001
    JP_C_nn(218), //   DA   11011010
    UNUSED_DB(219), //   DB   11011011
    CALL_C_nn(220), //   DC   11011100
    UNUSED_DD(221), //   DD   11011101
    SBC_n(222), //   DE   11011110
    RST_18(223), //   DF   11011111
    LDH_ini_A(224), //   E0   11100000
    POP_HL(225), //   E1   11100001
    LDH_iCi_A(226), //   E2   11100010
    UNUSED_E3(227), //   E3   11100011
    UNUSED_E4(228), //   E4   11100100
    PUSH_HL(229), //   E5   11100101
    AND_n(230), //   E6   11100110
    RST_20(231), //   E7   11100111
    ADD_SP_nn(232), //   E8   11101000
    JP_HL(233), //   E9   11101001
    LD_inni_A(234), //   EA   11101010
    UNUSED_EB(235), //   EB   11101011
    UNUSED_EC(236), //   EC   11101100
    UNUSED_ED(237), //   ED   11101101
    XOR_n(238), //   EE   11101110
    RST_28(239), //   EF   11101111
    LDH_A_ini(240), //   F0   11110000
    POP_AF(241), //   F1   11110001
    LDH_A_iCi(242), //   F2   11110010
    DI(243), //   F3   11110011
    UNUSED_F4(244), //   F4   11110100
    PUSH_AF(245), //   F5   11110101
    OR_n(246), //   F6   11110110
    RST_30(247), //   F7   11110111
    LDHL_SP_n(248), //   F8   11111000
    LD_SP_HL(249), //   F9   11111001
    LD_A_inni(250), //   FA   11111010
    EI(251), //   FB   11111011
    UNUSED_FC(252), //   FC   11111100
    UNUSED_FD(253), //   FD   11111101
    CP_n(254), //   FE   11111110
    RST_38(255); //   FF   11111111

    private int opcode;

    BaseOpcode(int opcode) {
        this.opcode = opcode;
    }

    @Override
    public Byte byteValue() {
        return new Byte(intValue());
    }

    @Override
    public int intValue() {
        return opcode;
    }

    public static BaseOpcode from(int opcode) {
        for (BaseOpcode item: BaseOpcode.values()) {
            if (opcode == item.intValue()) {
                return item;
            }
        }
        throw new IllegalArgumentException();
    }

}
